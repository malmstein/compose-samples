# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

 # CONSTANTS
    releaseNotesDefault = "Bug fixes and other improvements"
    releaseNotesBodyHeader = "What's new:"
    releaseNotesFileBody = "../version/release-notes"
    releaseNotesLocales= ["en-US", "en-GB", "en-CA"]
    releaseNotesMaxLength = 500

default_platform(:android)

platform :android do

    desc "Tag and release a new app version"
        lane :tag_and_release_version do |options|
            ensure_git_status_clean
            ensure_git_branch( branch: 'develop' )

            options_release_number = options[:release_number]
            options_release_notes = options[:release_notes]

            releaseNotes = determine_release_notes(releaseNotes: options_release_notes)

            update_app_version_and_release_notes(newVersion: options_release_number, newReleaseNotes: releaseNotes)
            do_create_and_push_tags(newVersion: options_release_number)

        end

        private_lane :determine_release_notes do |options|
            custom_release_notes = options[:release_notes]
            existingReleaseNotes = File.read(releaseNotesFileBody)

            # This handles the flow when no options were passed. We will prompt the user for input.
            releaseNotes = if (custom_release_notes == nil) then
                default_release_notes()
            else
                custom_release_notes
            end

            validateReleaseNotes(releaseNotes: releaseNotes)

            releaseNotes
        end

          desc "Generate default release notes"
          private_lane :default_release_notes do

            formatted = "#{releaseNotesBodyHeader}\n#{releaseNotesDefault}"

            UI.message("\n#{formatted}")

            formatted

          end

            desc "Validates the release notes to ensure they are suitable for the Play Store"
            private_lane :validateReleaseNotes do |options|
                releaseNotesLength = options[:releaseNotes].length
                if (releaseNotesLength > releaseNotesMaxLength)
                    UI.user_error!("Release notes are too long for Play Store (#{releaseNotesLength} characters). Max size allowed: #{releaseNotesMaxLength}")
                end
            end

            desc "Updates app version and adds default release notes"
            private_lane :update_app_version_and_release_notes do |options|
                newVersion = options[:newVersion]
                releaseNotes = options[:newReleaseNotes]
                sh "git checkout -b release/#{newVersion} develop"

                File.open('../version/version.properties', 'w') do |file|
                    file.write("VERSION=#{newVersion}")
                end

                File.open('../app/version/release-notes', 'w') do |file|
                    file.write("""#{releaseNotes}""")
                end

                git_commit(
                    message: "Updated release notes and version number for new release - #{newVersion}",
                    path: "*",
                    allow_nothing_to_commit: true,
                    skip_git_hooks: true
                )
            end

            desc "Creates and pushes tags for the supplied app version"
            private_lane :do_create_and_push_tags do |options|
                newVersion = options[:newVersion]

                sh "git checkout main"
                sh "git merge --no-ff release/#{newVersion}"
                sh "git tag -a #{newVersion} -m #{newVersion}"
                sh "git checkout develop"
                sh "git merge --no-ff release/#{newVersion}"
                sh "git branch -d release/#{newVersion}"

                push_git_tags(tag: newVersion)
                sh "git push origin main"
                sh "git push origin develop"

                UI.header("#{newVersion} tag has been successfully created. ðŸŽ‰")
            end

end